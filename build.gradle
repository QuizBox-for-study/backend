plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id "org.asciidoctor.jvm.convert" version "3.3.2"  // (1) restdocs
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	asciidoctorExt // (2) restdocs
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	//jwt 0.12.3
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.3'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.3'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.3'

	//query dsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'com.querydsl:querydsl-sql:5.0.0'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	// OAuth2 Client
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// restdocs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor' // (3) restdocs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // (4) restdocs



	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

ext {
	snippetsDir = file('build/generated-snippets') // (5) restdocs
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir // (6) restdocs
}


asciidoctor {
	configurations 'asciidoctorExt' // (7) restdocs
	baseDirFollowsSourceFile() // (8) restdocs
	inputs.dir snippetsDir // (9) restdocs
	dependsOn test // (10) restdocs
}


asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')  // (11) restdocs
}

task copyDocument(type: Copy) { // (12) restdocs
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument // restdocs
}